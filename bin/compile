#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
buildpack="$(cd -P "$(dirname "$0")" && pwd)"

source "${buildpack}/common.sh"

if [ -n "$BUILDPACK_DEBUG" ]; then
  set -x
fi

MATTERMOST_PATH="$BUILD_DIR/mattermost"
TMP_PATH="$BUILD_DIR/tmp"
mkdir -p "${BUILD_DIR}/bin" "${CACHE_DIR}/dist" "${CACHE_DIR}/dist/plugins" "${TMP_PATH}"
export PATH="$BUILD_DIR/bin:$PATH"

STACK="${STACK:-scalingo-18}"

start "Install Mattermost"

if [[ -f "$ENV_DIR/MATTERMOST_VERSION" ]]; then
  MATTERMOST_VERSION=$(cat "$ENV_DIR/MATTERMOST_VERSION")
else
  MATTERMOST_VERSION="5.34.2"
fi

if [[ -f "${ENV_DIR}/MATTERMOST_EDITION" ]]; then
  MATTERMOST_EDITION=$(cat "$ENV_DIR/MATTERMOST_EDITION")
else
  MATTERMOST_EDITION="" # default is enterprise (empty) and otherwise team
fi

start "Fetch Mattermost ${MATTERMOST_VERSION} ${MATTERMOST_EDITION} dist"

if [ ! -d "${MATTERMOST_PATH}" ]; then
  fetch_mattermost_dist "${MATTERMOST_VERSION}" "${TMP_PATH}" "${MATTERMOST_EDITION}" | indent
  mv "${TMP_PATH}/mattermost" "${MATTERMOST_PATH}"
else
  warn "Mattermost already installed"
  if [[ -f "${ENV_DIR}/MATTERMOST_MIGRATION" ]]; then
    MATTERMOST_MIGRATION=$(cat "$ENV_DIR/MATTERMOST_MIGRATION")
  else
    MATTERMOST_MIGRATION=0
  fi
  if [ $MATTERMOST_MIGRATION == 1 ]; then
    info "Mattermost migration into ${MATTERMOST_VERSION}"
    mv "/app/mattermost" "${TMP_PATH}/mattermost-backup"
    fetch_mattermost_dist "${MATTERMOST_VERSION}" "${TMP_PATH}" | indent
    mv "${TMP_PATH}/mattermost-${MATTERMOST_VERSION}" "${MATTERMOST_PATH}"
  fi
fi
finished

mkdir -p "$BUILD_DIR/plugins" "$MATTERMOST_PATH/client/plugins"

start "Install plugins list from marketplace"
if [[ -f "${ENV_DIR}/MATTERMOST_MARKETPLACE_PLUGINS" ]]; then
  MATTERMOST_MARKETPLACE_PLUGINS=$(cat "$ENV_DIR/MATTERMOST_MARKETPLACE_PLUGINS")
else
  MATTERMOST_MARKETPLACE_PLUGINS=""
fi
if [[ -n $MATTERMOST_MARKETPLACE_PLUGINS ]]; then
  install_marketplace_plugins_list "$BUILD_DIR/plugins" "${MATTERMOST_VERSION}" "${MATTERMOST_MARKETPLACE_PLUGINS}"
else
  info "No plugins from marketplace to install"
fi
finished

start "Install plugins list from Github"
if [[ -f "${ENV_DIR}/MATTERMOST_GITHUB_PLUGINS" ]]; then
  MATTERMOST_GITHUB_PLUGINS=$(cat "$ENV_DIR/MATTERMOST_GITHUB_PLUGINS")
else
  MATTERMOST_GITHUB_PLUGINS=""
fi
if [[ -n $MATTERMOST_GITHUB_PLUGINS ]]; then
  install_github_plugins_list "$BUILD_DIR/plugins" "${MATTERMOST_GITHUB_PLUGINS}"
else
  info "No plugins from Github to install"
fi
finished

start "Install prepackaged plugins"
if [[ -f "${ENV_DIR}/MATTERMOST_PREPACKAGED_PLUGINS" ]]; then
  MATTERMOST_PREPACKAGED_PLUGINS=$(cat "$ENV_DIR/MATTERMOST_PREPACKAGED_PLUGINS")
else
  MATTERMOST_PREPACKAGED_PLUGINS=""
fi
if [[ -n $MATTERMOST_PREPACKAGED_PLUGINS ]]; then
  install_prepackaged_plugins_list "$BUILD_DIR/plugins" "${MATTERMOST_PREPACKAGED_PLUGINS}" "$MATTERMOST_PATH"
else
  info "No prepackaged plugins to install"
fi
finished

start "Fixing plugin IDs"
fix_plugin_ids "$BUILD_DIR/plugins"
finished

if [[ -z "${MATTERMOST_EDITION}" ]]; then
  MATTERMOST_EDITION_LABEL="enterprise"
else
  MATTERMOST_EDITION_LABEL="team" # default is enterprise (empty) and otherwise team
fi

info "Using mattermost version: ${MATTERMOST_VERSION} edition: ${MATTERMOST_EDITION_LABEL}" | indent
finished

start "Building run"
cp "${buildpack}/run.sh" "${MATTERMOST_PATH}/bin/run"
chmod +x "${MATTERMOST_PATH}/bin/run"
finished

step "Cleaning up tmp files"
rm -rf "${TMP_PATH}"

finished
